package ar.edu.itba.ss;

import ar.edu.itba.ss.integrations.Integration;
import ar.edu.itba.ss.models.AcceleratedParticle;
import ar.edu.itba.ss.models.Frame;
import ar.edu.itba.ss.models.ParticleHistory;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public abstract class AbstractSimulation implements Simulation<List<Frame>> {

    // Status bar
    protected final int                     STATUS_BAR_SIZE         = 31;

    protected       Integration             integration;
    protected       double                  dt;
    protected       double                  maxTime;
    protected       long                    saveFactor;
    protected       boolean                 statusBarActivated;

    public abstract List<AcceleratedParticle> getParticles();

    public boolean stop(List<ParticleHistory> histories) {
        return false;
    }

    public void printStatusBar(double time) {
        if (statusBarActivated) Utils.printLoadingBar(time/maxTime, STATUS_BAR_SIZE);
    }

    public List<Frame> simulate() {
        List<AcceleratedParticle> particles = getParticles();

        List<ParticleHistory> histories = particles.stream()
            .map(p -> {
                final ParticleHistory history = new ParticleHistory()
                    .withPast(p)
                    .withPresent(p.clone())
                    ;

                integration.setup(history.getPast(), history.getPresent(), history.getFuture(), dt);

                return history;
            })
            .collect(Collectors.toList());

        List<Frame> frames = new ArrayList<>();

        long count;
        double time;

        for (time = 0, count = 0; time <= maxTime && !stop(histories); time += dt, count++) {   // currentTime
            // Status bar
            printStatusBar(time);

            // Save particles
            if (count % saveFactor == 0) {
                frames.add(new Frame()
                    .withParticles(histories.stream()
                        .map(ParticleHistory::getPresent)
                        .collect(Collectors.toList()))
                    .withTime(time)
                );
            }

            // Update particles
            for (ParticleHistory h : histories) {
                h.setFuture(integration.update(
                    histories.stream()
                        .map(ParticleHistory::getPresent)
                        .collect(Collectors.toList()),
                    h.getPresent(),
                    h.getPast(),
                    dt
                ));       //updated particle with ri(t+dt) y vi(t)

                h.setPast(h.getPresent());
                h.setPresent(h.getFuture());
            }
        }

        return frames;
    }

    //////////////// Autogenerated /////////////////

    public Integration getIntegration() {
        return integration;
    }
    public void setIntegration(Integration integration) {
        this.integration = integration;
    }

    public double getDt() {
        return dt;
    }
    public void setDt(double dt) {
        this.dt = dt;
    }

    public double getMaxTime() {
        return maxTime;
    }
    public void setMaxTime(double maxTime) {
        this.maxTime = maxTime;
    }

    public long getSaveFactor() {
        return saveFactor;
    }
    public void setSaveFactor(long saveFactor) {
        this.saveFactor = saveFactor;
    }

    public boolean isStatusBarActivated() {
        return statusBarActivated;
    }
    public void setStatusBarActivated(boolean statusBarActivated) {
        this.statusBarActivated = statusBarActivated;
    }

}
