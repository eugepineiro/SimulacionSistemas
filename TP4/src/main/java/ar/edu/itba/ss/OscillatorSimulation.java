package ar.edu.itba.ss;

import ar.edu.itba.ss.integrations.Integration;
import ar.edu.itba.ss.integrations.VerletOriginal;
import ar.edu.itba.ss.models.AcceleratedParticle;
import ar.edu.itba.ss.models.Frame;
import ar.edu.itba.ss.models.ParticleType;

import java.util.*;

public class OscillatorSimulation implements Simulation<List<Frame>> {

    // Status bar
    private final   int                     STATUS_BAR_SIZE         = 31;

    private         Integration             integration;
    private         double                  dt;
    private         double                  maxTime;
    private         long                    saveFactor;
    private         boolean                 statusBarActivated;

    private         AcceleratedParticle     particle;

    // Stop conditions

    public List<Frame> simulate() {

        // Initial Conditions
        double k        = Math.pow(10,4);       // N/m
        double r        = 1;                    // m
        double gamma    = 100;                  // kg/s
        double vy       = -gamma/2;             // m/s

        particle = new AcceleratedParticle()
            .withType(ParticleType.OSCILLABLE)
            .withY(r)
            .withVy(vy)
            .withMass(70)                   // kg
            ;


        List<Frame> frames = new ArrayList<>();

        AcceleratedParticle previous    = particle;                    // (t-dt)
        AcceleratedParticle current     = previous.clone();            // (t)
        AcceleratedParticle next        = null;                        // (t+dt)

        integration.setup(previous, current, next, dt);

        double currentForce;

        frames.add(new Frame()
            .withParticles(Collections.singletonList(previous))
            .withTime(0)
        );

        for (double time = dt; time < maxTime; time += dt) {   // currentTime
            if (statusBarActivated) Utils.printLoadingBar(time/maxTime, STATUS_BAR_SIZE);

            currentForce = - k * current.getY() - gamma * current.getVy();  // f(t) = -k*r - gamma*r'
            current.setForceY(currentForce);

            next = integration.update(current, previous, dt);       //updated particle with ri(t+dt) y vi(t)

            frames.add(new Frame()
                .withParticles(Collections.singletonList(current))
                .withTime(time)
            );

            previous = current;
            current  = next;
        }

        return frames;
    }

    //////////////// Autogenerated /////////////////


    public Integration getIntegration() {
        return integration;
    }
    public void setIntegration(Integration integration) {
        this.integration = integration;
    }
    public OscillatorSimulation withIntegration(Integration integration) {
        setIntegration(integration);
        return this;
    }

    public double getDt() {
        return dt;
    }
    public void setDt(double dt) {
        this.dt = dt;
    }
    public OscillatorSimulation withDt(double dt) {
        setDt(dt);
        return this;
    }

    public double getMaxTime() {
        return maxTime;
    }
    public void setMaxTime(double maxTime) {
        this.maxTime = maxTime;
    }
    public OscillatorSimulation withMaxTime(double maxTime) {
        setMaxTime(maxTime);
        return this;
    }

    public long getSaveFactor() {
        return saveFactor;
    }
    public void setSaveFactor(long saveFactor) {
        this.saveFactor = saveFactor;
    }
    public OscillatorSimulation withSaveFactor(long saveFactor) {
        setSaveFactor(saveFactor);
        return this;
    }

    public boolean isStatusBarActivated() {
        return statusBarActivated;
    }
    public void setStatusBarActivated(boolean statusBarActivated) {
        this.statusBarActivated = statusBarActivated;
    }
    public OscillatorSimulation withStatusBarActivated(boolean statusBarActivated) {
        setStatusBarActivated(statusBarActivated);
        return this;
    }
}
