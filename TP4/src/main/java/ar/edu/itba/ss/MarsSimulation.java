package ar.edu.itba.ss;

import ar.edu.itba.ss.integrations.Integration;
import ar.edu.itba.ss.models.AcceleratedParticle;
import ar.edu.itba.ss.models.ParticleHistory;
import ar.edu.itba.ss.models.ParticleType;

import java.util.List;

public class MarsSimulation extends PlanetsSimulation {

    static final private double MAX_DISTANCE_FROM_SUN       = 227.9 * Math.pow(10, 6);      // TODO: Check landing planet orbit
    static final private double MAX_PLANET_ORBIT_TOLERANCE  = 1000;                         // TODO: find a real one

    protected AcceleratedParticle mars;

    @Override
    public boolean stop(List<ParticleHistory> histories) {
        final AcceleratedParticle currentSpaceship = histories.stream()
            .map(ParticleHistory::getPresent)
            .filter(p -> p.getType().equals(ParticleType.SPACESHIP))
            .findAny()
            .orElse(null);

        final AcceleratedParticle currentMars = histories.stream()
            .map(ParticleHistory::getPresent)
            .filter(p -> p.getType().equals(ParticleType.MARS))
            .findAny()
            .orElse(null);

        if (currentSpaceship == null || currentMars == null) {
            return false;
        }
        else {
            final double distanceToPlanet = currentMars.distance(currentSpaceship);
            if (distanceToPlanet <= currentMars.getRadius()) return true;
            final double distance = sun.distance(currentSpaceship);
            return distance > MAX_DISTANCE_FROM_SUN + mars.getRadius() + MAX_PLANET_ORBIT_TOLERANCE;
        }
    }

    protected List<AcceleratedParticle> getBaseParticles() {
        List<AcceleratedParticle> particles =  super.getBaseParticles();

        /* Mars */
        double marsMass             = mars != null ? mars.getMass() : 6.4171 * Math.pow(10, 23);                // kg
        double marsRadius           = mars != null ? mars.getRadius() : 3389.92;                                // km
        double marsX                = mars != null ? mars.getX() : -2.426617401833969 * Math.pow(10,8);         // km/s
        double marsY                = mars != null ? mars.getY() : -3.578836154354768 * Math.pow(10,7) ;        // km/s
        double marsVx               = mars != null ? mars.getVx() : 4.435907910045917;                          // km/s
        double marsVy               = mars != null ? mars.getVy() : -2.190044178514185 * Math.pow(10,1);        // km/s

        mars = mars != null ? mars : new AcceleratedParticle()
            .withType(ParticleType.MARS)
            .withMass(marsMass)
            .withRadius(marsRadius)
            .withVx(marsVx)
            .withVy(marsVy)
            .withX(marsX)
            .withY(marsY)
        ;

        particles.add(mars);
        return particles;
    }

    // Autogenerated //

    public MarsSimulation withIntegration(Integration integration) {
        setIntegration(integration);
        return this;
    }
    public MarsSimulation withDt(double dt) {
        setDt(dt);
        return this;
    }
    public MarsSimulation withMaxTime(double maxTime) {
        setMaxTime(maxTime);
        return this;
    }
    public MarsSimulation withSaveFactor(long saveFactor) {
        setSaveFactor(saveFactor);
        return this;
    }
    public MarsSimulation withStatusBarActivated(boolean statusBarActivated) {
        setStatusBarActivated(statusBarActivated);
        return this;
    }

    public MarsSimulation withSpaceshipPresent(boolean spaceshipPresent) {
        setSpaceshipPresent(spaceshipPresent);
        return this;
    }

    public MarsSimulation withSpaceshipInitialSpeed(double initialSpeed) {
        setSpaceshipInitialSpeed(initialSpeed);
        return this;
    }

    public void setMars(AcceleratedParticle mars) {
        this.mars = mars;
    }
}
