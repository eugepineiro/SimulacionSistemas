package ar.edu.itba.ss;

import ar.edu.itba.ss.integrations.Integration;
import ar.edu.itba.ss.models.AcceleratedParticle;
import ar.edu.itba.ss.models.Frame;
import ar.edu.itba.ss.models.ParticleHistory;
import ar.edu.itba.ss.models.ParticleType;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class MarsSimulation implements Simulation<List<Frame>> {

    // Status bar
    private final   int             STATUS_BAR_SIZE         = 31;

    private         Integration     integration;
    private         double          dt;
    private         double          maxTime;
    private         long            saveFactor;
    private         boolean         statusBarActivated;


    private         AcceleratedParticle     earth, sun, spaceship, mars;



    public List simulate() {

        double gravityConstant = Math.pow(6.693*10, -11); // m³/(kg*s²)   // TODO change units
        /* Earth */
        double earthRadius      = 6378.137;                         // km
        double earthMass        = Math.pow(5.97219*10, 24);         // kg
        double earthVelocity    = 0;                                // TODO elegir un
        double earthVx          = Math.pow(-9.322979134387409,-1);  // km/s
        double earthVy          = Math.pow(2.966365033636722,1);
        double earthX           = Math.pow(1.500619962348151,8);    // km
        double earthY           = Math.pow(2.288499248197072,6);
        /* Sun */
        double sunRadius        = 696000;                           // km  o va el vol. mean radius ?? 695700
        double sunMass          = Math.pow(1988500*10, 24);         // kg
        /* Mars */
        double marsMass         = Math.pow(6.4171*10, 23);          // kg
        double marsRadius       = 3389.92;                          // km
        double marsVx           = 4.435907910045917;
        double marsVy           = Math.pow(-2.190044178514185,1);
        double marsX            = Math.pow(-2.426617401833969,8);
        double marsY            = Math.pow(-3.578836154354768,7) ;

        /* Spaceship */
        double stationHeight    = 1500; // km
        double orbitalVelocity  = 7.12; // km/s
        double initialVelocity  = 8 + orbitalVelocity + earthVelocity; // km // TODO elegir un momento  para earthVelocity
        double spaceshipMass    = Math.pow(2*10, 5); // kg

        List<Frame> frames = new ArrayList<>();

        earth = new AcceleratedParticle()
                .withType(ParticleType.EARTH)
                .withMass(earthMass)
                .withRadius(earthRadius)
                .withVx(earthVx)
                .withVy(earthVy)
                .withX(earthX)
                .withY(earthY)
        ;

        sun = new AcceleratedParticle() // inicia en (0,0)
                .withType(ParticleType.SUN)
                .withMass(sunMass)
                .withRadius(sunRadius)
        ;

        mars = new AcceleratedParticle()
                .withType(ParticleType.MARS)
                .withMass(marsMass)
                .withRadius(marsRadius)
                .withVx(marsVx)
                .withVy(marsVy)
                .withX(marsX)
                .withY(marsY)
        ;

        spaceship = new AcceleratedParticle()
                .withType(ParticleType.SPACESHIP)
                .withMass(spaceshipMass)
        ;

        List<ParticleHistory> histories = Stream.of(earth, sun, mars, spaceship)
                .map(p -> {
                        final ParticleHistory history = new ParticleHistory()
                            .withPast(p)
                            .withPresent(p.clone())
                            ;

                        integration.setup(history, dt);

                        return history;
                })
                .collect(Collectors.toList());

        long count = 0;
        for (double time = 0; time <= maxTime; time += dt) {   // currentTime
            if (statusBarActivated) Utils.printLoadingBar(time/maxTime, STATUS_BAR_SIZE);

            if (count % saveFactor == 0) {
                frames.add(new Frame()
                        .withParticles(histories.stream().map(ParticleHistory::getPresent).collect(Collectors.toList()))
                        .withTime(time)
                );
            }
            for (ParticleHistory h : histories) {
                h.setFuture(integration.update(Collections.singletonList(h.getPresent()), h.getPresent(), h.getPast(), dt));       //updated particle with ri(t+dt) y vi(t)

                h.setPast(h.getPresent());
                h.setPresent(h.getFuture());
            }

            count++;
        }

        return frames;
    }

    //////////////// Autogenerated /////////////////

    public Integration getIntegration() {
        return integration;
    }
    public void setIntegration(Integration integration) {
        this.integration = integration;
    }
    public MarsSimulation withIntegration(Integration integration) {
        setIntegration(integration);
        return this;
    }

    public double getDt() {
        return dt;
    }
    public void setDt(double dt) {
        this.dt = dt;
    }
    public MarsSimulation withDt(double dt) {
        setDt(dt);
        return this;
    }

    public double getMaxTime() {
        return maxTime;
    }
    public void setMaxTime(double maxTime) {
        this.maxTime = maxTime;
    }
    public MarsSimulation withMaxTime(double maxTime) {
        setMaxTime(maxTime);
        return this;
    }

    public long getSaveFactor() {
        return saveFactor;
    }
    public void setSaveFactor(long saveFactor) {
        this.saveFactor = saveFactor;
    }
    public MarsSimulation withSaveFactor(long saveFactor) {
        setSaveFactor(saveFactor);
        return this;
    }

    public boolean isStatusBarActivated() {
        return statusBarActivated;
    }
    public void setStatusBarActivated(boolean statusBarActivated) {
        this.statusBarActivated = statusBarActivated;
    }
    public MarsSimulation withStatusBarActivated(boolean statusBarActivated) {
        setStatusBarActivated(statusBarActivated);
        return this;
    }
}
